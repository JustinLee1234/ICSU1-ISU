import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.Graphics2D;
import javax.imageio.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent; 

public class TilePanel extends JPanel implements MouseListener{
  private char map[][];
  private final int TILE_SIZE = 50;
  private final int MAP_WIDTH;
  private final int MAP_HEIGHT;
  private int tileX;
  private int tileY;
  private Player player;
  private int spawnX;
  private int spawnY;
  private int obstacleX;
  private int obstacleY;
  public boolean home;
  public boolean instructions;
  public boolean levels;
  private static BufferedImage playerSprite;
  private static BufferedImage heartCanister;
  private static BufferedImage emptyCanister;
  private static BufferedImage obstacle;
  private static BufferedImage coin;
  private static BufferedImage homeBg;
  private static BufferedImage buttonTxt;
  private static BufferedImage instructionButtonTxt;
  private static BufferedImage titleTxt;
  public int coinX;
  public int coinY;
  public int coinCount = 0;
  public boolean validLocation = true;
  public boolean visibleCoin = true;
  public int mapNum = 1;
  
  public TilePanel(char[][] map, int width, int height, Player p){
    this.map = map;
    this.setPreferredSize(new Dimension(width * this.TILE_SIZE,height*this.TILE_SIZE)); //requests to be a certain size
    this.MAP_WIDTH = width;
    this.MAP_HEIGHT = height;
    this.addKeyListener(p);
    this.addMouseListener(new TilePanelMouseListener());
    this.setFocusable(true); 
    this.grabFocus();
    this.player = p;
  }
  public void mousePressed(MouseEvent e) {
    if (e.getPoint().x > 570 && e.getPoint().x < 730 && e.getPoint().y > 370 && e.getPoint().y < 420){
      System.out.println("Map 1 Selected");
      mapNum = 1;
    }
    if(e.getPoint().x > 570 && e.getPoint().x < 730 && e.getPoint().y > 450 && e.getPoint().y < 500){
      System.out.println("Map 2 Selected");
      mapNum = 2;
    }
    if(e.getPoint().x > 570 && e.getPoint().x < 730 && e.getPoint().y > 525 && e.getPoint().y < 575){
      System.out.println("Map 3 Selected");
      mapNum = 3;
    }
    if(e.getPoint().x > 570 && e.getPoint().x < 730 && e.getPoint().y > 600 && e.getPoint().y < 650){
      System.out.println("Map 4 Selected");
      mapNum = 4;
    }
    if(e.getPoint().x > 570 && e.getPoint().x < 730 && e.getPoint().y > 680 && e.getPoint().y < 725){
      System.out.println("Map 5 Selected");
      mapNum = 5;
  }
  }
  
  public void mouseReleased(MouseEvent e) {
  }
  
  public void mouseEntered(MouseEvent e) {
  }
  
  public void mouseExited(MouseEvent e) {
  }
  
  public void mouseClicked(MouseEvent e) {
  }
  
  public void setMap(char[][] map){
    this.map = map;
  }
  public int generateCoinX() {
    int r = (int) (Math.random()*15);
    coinX = r;
    return coinX;
  }
  public int generateCoinY(){
    int r = (int) (Math.random()*15);
    coinY = r;
    return coinY;
  }
  
  public void checkCollision(){
    for(int i = 0; i<15;i++)  { 
      for(int j = 0; j<15;j++)  {
        if (map[i][j] == 'x'){
          if (player.getCurrentX() < j+1 && player.getCurrentX()+1 > j && player.getCurrentY()+1 > i && player.getCurrentY() < i+1){
            if (player.getCurrentX() < j+1 && player.getCurrentX() > j){
              player.setX((player.getX()+1));
            }
            else if (player.getCurrentX()+1 < j+1 && player.getCurrentX()+1 > j){
              player.setX(player.getX()-1);
            }
            if (player.getCurrentY() < i+1 && player.getCurrentY() > i){
              player.setY(player.getY()+1);
            }
            else if (player.getCurrentY()+1 < j+i && player.getCurrentY()+1 >i){
              player.setY(player.getY()-1);
            } 
          }
        }
      }
    }
    for(int i = 0; i<15;i++)  { 
      for(int j = 0; j<15;j++)  {
        if (map[i][j] == 'b'){
          if (player.getCurrentX() < j+1 && player.getCurrentX()+1 > j && player.getCurrentY()+1 > i && player.getCurrentY() < i+1){
            player.setX((int)spawnX/50);
            player.setY((int)spawnY/50);
          }
        }
      }
    }  
  }

  
  public static void loadImages(){
    try{ 
      playerSprite = ImageIO.read(new File(".\\assets\\sprites\\playerSprite.png")); 
      heartCanister = ImageIO.read(new File(".\\assets\\sprites\\heart.png"));
      emptyCanister = ImageIO.read(new File(".\\assets\\sprites\\heartLost.png"));
      obstacle = ImageIO.read(new File (".\\assets\\sprites\\obstacle.png"));
      coin = ImageIO.read(new File(".\\assets\\sprites\\coin.png"));
      homeBg = ImageIO.read(new File(".\\assets\\sprites\\homeScreen.png"));
      buttonTxt = ImageIO.read(new File(".\\assets\\sprites\\buttonTxt.png"));
      instructionButtonTxt = ImageIO.read(new File(".\\assets\\sprites\\instructionButtonTxt.png"));
      titleTxt = ImageIO.read(new File(".\\assets\\sprites\\titleTxt.png"));
    }
    catch(Exception e){
      System.out.println("Image file not found");
    }
  }
  
  public void paintComponent(Graphics g){
    super.paintComponent(g);
    Graphics2D g2d = (Graphics2D) g;
    JFrame Frame = new JFrame();
    super.repaint();
    setDoubleBuffered(true);
    
    home = true;
    instructions = false;
    levels = false;
    
    if (home == true){
      g2d.drawImage(homeBg,0,0, null);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (220,480,300,80);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(220,480,300,80);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (570,370,160,50);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(570,370,160,50);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (570,451,160,50);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(570,451,160,50);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (570,524,160,50);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(570,524,160,50);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (570,600,160,50);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(570,600,160,50);
      
      g2d.setColor(new Color(31, 21, 1));
      g2d.drawRect (570,675,160,50);
      g2d.setColor(new Color(225, 225, 225));
      g2d.fillRect(570,675,160,50);
      
      g2d.drawImage(buttonTxt,535,330, null);
      g2d.drawImage(instructionButtonTxt,-40,300, null);
      g2d.drawImage(titleTxt,0,25, null);
    }
    else if (levels == true){
      for(int i = 0; i<15;i++)  { 
        for(int j = 0; j<15;j++)  {
          if (map[i][j] == 'x')
            g.setColor(Color.DARK_GRAY);
          else if (map[i][j] == 'b'){
            g.setColor(Color.CYAN);
            obstacleX = j* TILE_SIZE;
            obstacleY = i * TILE_SIZE;
          }
          else if (map[i][j] == '0')
            g.setColor(Color.CYAN);
          else if (map[i][j] == 'p')
          {
            g.setColor(Color.GREEN);
            spawnX = j*TILE_SIZE;
            spawnY = i*TILE_SIZE;
          }
          else if (map[i][j] == 's')
            g.setColor(Color.GREEN);
          else if (map[i][j] == 'g')
            g.setColor(Color.RED);
          
          tileX = j*TILE_SIZE;
          tileY = i*TILE_SIZE;
          
          g.fillRect(tileX, tileY, 50, 50);
          g.setColor(Color.DARK_GRAY);
          g.drawRect(tileX, tileY, 50, 50);
          g.drawImage(obstacle, obstacleX, obstacleY, null);
        } 
      }
      player.setCurrentX((spawnX + player.getX())/50.0);
      player.setCurrentY((spawnY + player.getY())/50.0);
      g.drawImage(playerSprite, (int)(player.getCurrentX()*50), (int)(player.getCurrentY()*50), null);
      
      
      while (visibleCoin){
        generateCoinX();
        generateCoinY(); 
        validLocation = false;
        while(!validLocation){
          validLocation = true;
          for(int i = 0; i<15;i++)  { 
            for(int j = 0; j<15;j++)  {
              if (map[i][j] == 'x' || map[i][j] == 'b'){
                if (coinX == j && coinY == i){
                  validLocation = false;
                  generateCoinX();
                  generateCoinY();
                }
                else
                  visibleCoin = false;
              }
            }
          }           
        }
      }
      
      g.drawImage(coin, coinX*50, coinY*50, null);
      if (player.getCurrentX() < coinX+1 && player.getCurrentX()+1 > coinX && player.getCurrentY()+1 > coinY && player.getCurrentY() < coinY+1){
        visibleCoin = true;
        coinCount++;
        System.out.println(coinCount);
      }
      
    }
  }
}
